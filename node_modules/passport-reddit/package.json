{
  "name": "passport-reddit",
  "version": "0.2.4",
  "description": "Reddit authentication strategy for Passport.",
  "keywords": [
    "passport",
    "reddit",
    "auth",
    "authn",
    "authentication",
    "identity"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/slotos/passport-reddit.git"
  },
  "bugs": {
    "url": "http://github.com/slotos/passport-reddit/issues"
  },
  "author": {
    "name": "Jared Hanson",
    "email": "jaredhanson@gmail.com",
    "url": "http://www.jaredhanson.net/"
  },
  "contributors": [
    {
      "name": "Dmytro Soltys",
      "email": "soap@slotos.net",
      "url": "http://slotos.net/"
    },
    {
      "name": "Brian Partridge",
      "email": "contact@brianpartridge.com",
      "url": "http://brianpartridge.com/"
    }
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/MIT"
    }
  ],
  "main": "./lib/passport-reddit",
  "dependencies": {
    "pkginfo": "0.3.x",
    "passport-oauth": "1.x"
  },
  "devDependencies": {
    "mocha": "*",
    "should": "*",
    "sinon": "*",
    "blanket": "*",
    "coveralls": "*",
    "mocha-lcov-reporter": "*",
    "nock": "*",
    "passport": "*",
    "supertest": "*",
    "crypto": "*",
    "express": "*"
  },
  "scripts": {
    "test": "make coveralls"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "readme": "# Passport-Reddit [![Build Status](https://secure.travis-ci.org/Slotos/passport-reddit.png)](http://travis-ci.org/Slotos/passport-reddit) [![Coverage Status](https://coveralls.io/repos/Slotos/passport-reddit/badge.png)](https://coveralls.io/r/Slotos/passport-reddit)\n\n[Passport](https://github.com/jaredhanson/passport) strategy for authenticating\nwith [Reddit](http://reddit.com/) using the OAuth 2.0 API.\n\nThis module lets you authenticate using Reddit in your Node.js applications.\nBy plugging into Passport, Reddit authentication can be easily and\nunobtrusively integrated into any application or framework that supports\n[Connect](http://www.senchalabs.org/connect/)-style middleware, including\n[Express](http://expressjs.com/).\n\n## Install\n\n    $ npm install passport-reddit\n\n## Usage\n\n#### Configure Strategy\n\nThe Reddit authentication strategy authenticates users using a Reddit\naccount and OAuth 2.0 tokens.  The strategy requires a `verify` callback, which\naccepts these credentials and calls `done` providing a user, as well as\n`options` specifying a client ID, client secret, and callback URL.\n\n```javascript\npassport.use(new RedditStrategy({\n    clientID: REDDIT_CONSUMER_KEY,\n    clientSecret: REDDIT_CONSUMER_SECRET,\n    callbackURL: \"http://127.0.0.1:3000/auth/reddit/callback\"\n  },\n  function(accessToken, refreshToken, profile, done) {\n    User.findOrCreate({ redditId: profile.id }, function (err, user) {\n      return done(err, user);\n    });\n  }\n));\n```\n\n#### Authenticate Requests\n\nUse `passport.authenticate()`, specifying the `'reddit'` strategy, to\nauthenticate requests.\n\nFor example, as route middleware in an [Express](http://expressjs.com/)\napplication:\n\n```javascript\napp.get('/auth/reddit', function(req, res, next){\n  req.session.state = crypto.randomBytes(32).toString('hex');\n  passport.authenticate('reddit', {\n    state: req.session.state,\n    duration: 'permanent',\n  })(req, res, next);\n});\n\napp.get('/auth/reddit/callback', function(req, res, next){\n  // Check for origin via state token\n  if (req.query.state == req.session.state){\n    passport.authenticate('reddit', {\n      successRedirect: '/',\n      failureRedirect: '/login'\n    })(req, res, next);\n  }\n  else {\n    next( new Error 403 );\n  }\n});\n```\n\nNotice the `state` option use\nReddit requires state, otherwise erring out.\nI've decided to opt out of providing default state, since it kills the whole purpose of the flag.\nIf you don't want to use it, provide any string and don't check for it on user return.\nIf you think this is a stupid requirement, fill an issue with reddit.\nOnce they remove it, this middleware will simply work.\n\nAlso included is the optional `duration` parameter, to request a slightly longer authorization.\nDefaults to `temporary` (1 hour).\nDefined in the official [Reddit OAuth spec](https://github.com/reddit/reddit/wiki/OAuth2#authorization-parameters)\n\n## Examples\n\nFor a complete, working example, refer to the [login example](https://github.com/slotos/passport-reddit/tree/master/examples/login).\n\n## Tests\n\n    $ npm install --dev\n    $ make test\n\n## Credits\n\n  - [Jared Hanson](http://github.com/jaredhanson)\n  - [Dmytro Soltys](http://github.com/slotos)\n  - [Brian Partridge](http://github.com/bpartridge83)\n\n## License\n\n[The MIT License](http://opensource.org/licenses/MIT)\n\nOriginal work Copyright (c) 2012-2013 Jared Hanson <[http://jaredhanson.net/](http://jaredhanson.net/)>\n\nModified work Copyright (c) 2013 Dmytro Soltys <[http://slotos.net/](http://slotos.net/)>\n\nModified work Copyright (c) 2013 Brian Partridge <[http://brianpartridge.com/](http://brianpartridge.com/)>\n",
  "readmeFilename": "README.md",
  "_id": "passport-reddit@0.2.4",
  "dist": {
    "shasum": "4e5805d919a8f28f80c238f7da2d92a38067acc5",
    "tarball": "https://registry.npmjs.org/passport-reddit/-/passport-reddit-0.2.4.tgz"
  },
  "_from": "passport-reddit@latest",
  "_npmVersion": "1.3.11",
  "_npmUser": {
    "name": "slotos",
    "email": "slotos@gmail.com"
  },
  "maintainers": [
    {
      "name": "slotos",
      "email": "soap@slotos.net"
    }
  ],
  "directories": {},
  "_shasum": "4e5805d919a8f28f80c238f7da2d92a38067acc5",
  "_resolved": "https://registry.npmjs.org/passport-reddit/-/passport-reddit-0.2.4.tgz"
}
